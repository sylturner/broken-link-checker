{"version":3,"sources":["../../lib/internal/transitiveAuth.js"],"names":["DEFAULT_AUTH","Object","freeze","password","username","url","auth","isURL","lenient","TypeError","URL"],"mappings":";;;;;;;AAAA;;;;AAIA,MAAMA,YAAY,GAAGC,MAAM,CAACC,MAAP,CAAc;AAAEC,EAAAA,QAAQ,EAAC,EAAX;AAAeC,EAAAA,QAAQ,EAAC;AAAxB,CAAd,CAArB;AAIA;;;;;;;eAMe,CAACC,GAAD,EAAMC,IAAI,GAACN,YAAX,KACf;AACC,MAAI,CAACO,eAAMC,OAAN,CAAcH,GAAd,CAAL,EACA;AACC,UAAM,IAAII,SAAJ,CAAc,aAAd,CAAN;AACA,GAHD,MAIK,IAAIJ,GAAG,CAACD,QAAJ,KAAe,EAAf,IAAqBC,GAAG,CAACF,QAAJ,KAAe,EAAxC,EACL;AACC;AACAE,IAAAA,GAAG,GAAG,IAAIK,GAAJ,CAAQL,GAAR,CAAN;AAEAC,IAAAA,IAAI,GACJ;AACCH,MAAAA,QAAQ,EAAEE,GAAG,CAACF,QADf;AAECC,MAAAA,QAAQ,EAAEC,GAAG,CAACD;AAFf,KADA,CAJD,CAUC;;AACAC,IAAAA,GAAG,CAACF,QAAJ,GAAe,EAAf;AACAE,IAAAA,GAAG,CAACD,QAAJ,GAAe,EAAf;AACA;;AAED,SAAO;AAAEE,IAAAA,IAAF;AAAQD,IAAAA;AAAR,GAAP;AACA,C","sourcesContent":["import isURL from \"isurl\";\n\n\n\nconst DEFAULT_AUTH = Object.freeze({ password:\"\", username:\"\" });\n\n\n\n/**\n * Possibly override `auth` with that from `url`.\n * @param {URL} url\n * @param {object} [auth]\n * @returns {object}\n */\nexport default (url, auth=DEFAULT_AUTH) =>\n{\n\tif (!isURL.lenient(url))\n\t{\n\t\tthrow new TypeError(\"Invalid URL\");\n\t}\n\telse if (url.username!==\"\" || url.password!==\"\")\n\t{\n\t\t// Clone to avoid mutation\n\t\turl = new URL(url);\n\n\t\tauth =\n\t\t{\n\t\t\tpassword: url.password,\n\t\t\tusername: url.username\n\t\t};\n\n\t\t// @todo is this the kind of result we want, with auth stored in `http` ?\n\t\turl.password = \"\";\n\t\turl.username = \"\";\n\t}\n\n\treturn { auth, url };\n};\n"],"file":"transitiveAuth.js"}