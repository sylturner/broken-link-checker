{"version":3,"sources":["../../lib/internal/streamHtml.js"],"names":["CONTENT_TYPE","HTML_MIMETYPE","url","auth","cache","options","result","GET_METHOD","response","headers","status","HTMLRetrievalError","type","startsWith","ExpectedHTMLError"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAIA,MAAMA,YAAY,GAAG,cAArB;AACA,MAAMC,aAAa,GAAG,WAAtB;AAIA;;;;;;;;;;;eAUe,OAAOC,GAAP,EAAYC,IAAZ,EAAkBC,KAAlB,EAAyBC,OAAzB,KACf;AACC,QAAMC,MAAM,GAAG,MAAM,0BAAYJ,GAAZ,EAAiBC,IAAjB,EAAuBI,mBAAvB,EAAmCH,KAAnC,EAA0CC,OAA1C,CAArB;AACA,QAAM;AAACG,IAAAA,QAAQ,EAAE;AAACC,MAAAA,OAAD;AAAUC,MAAAA;AAAV;AAAX,MAAgCJ,MAAtC;;AAEA,MAAII,MAAM,GAAC,GAAP,IAAcA,MAAM,GAAC,GAAzB,EACA;AACC,UAAM,IAAIC,0BAAJ,CAAuBD,MAAvB,CAAN;AACA,GAHD,MAKA;AACC,UAAME,IAAI,GAAGH,OAAO,CAACT,YAAD,CAApB,CADD,CAGC;;AACA,QAAI,EAACY,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEC,UAAN,CAAiBZ,aAAjB,CAAD,CAAJ,EACA;AACC,YAAM,IAAIa,yBAAJ,CAAsBF,IAAtB,EAA4BF,MAA5B,CAAN;AACA;AACD;;AAED,SAAOJ,MAAP;AACA,C","sourcesContent":["import {ExpectedHTMLError, HTMLRetrievalError} from \"./errors\";\nimport {GET_METHOD} from \"./methods\";\nimport requestHTTP from \"./requestHTTP\";\n\n\n\nconst CONTENT_TYPE = \"content-type\";\nconst HTML_MIMETYPE = \"text/html\";\n\n\n\n/**\n * Request a URL for its HTML contents.\n * @param {URL} url\n * @param {object} auth\n * @param {URLCache} cache\n * @param {object} options\n * @throws {ExpectedHTMLError} if not HTML mimetype\n * @throws {HTMLRetrievalError} 404, etc\n * @returns {Promise<Stream>}\n */\nexport default async (url, auth, cache, options) =>\n{\n\tconst result = await requestHTTP(url, auth, GET_METHOD, cache, options);\n\tconst {response: {headers, status}} = result;\n\n\tif (status<200 || status>299)\n\t{\n\t\tthrow new HTMLRetrievalError(status);\n\t}\n\telse\n\t{\n\t\tconst type = headers[CONTENT_TYPE];\n\n\t\t// Content-type is not mandatory in HTTP spec\n\t\tif (!type?.startsWith(HTML_MIMETYPE))\n\t\t{\n\t\t\tthrow new ExpectedHTMLError(type, status);\n\t\t}\n\t}\n\n\treturn result;\n};\n"],"file":"streamHtml.js"}