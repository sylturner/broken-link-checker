{"version":3,"sources":["../../lib/internal/redisCache.js"],"names":["normalizeUrl","require","Redis","RedisCache","constructor","redisUrl","options","expire","cacheMaxAge","redis","clean","clear","delete","url","key","href","del","get","err","value","json","JSON","parse","set","stringify","module","exports"],"mappings":";;AAAA,MAAMA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA5B;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAArB;;AAEA,MAAME,UAAN,CACA;AACEC,EAAAA,WAAW,CAACC,QAAD,EAAWC,OAAX,EAAoB;AAC7B,SAAKC,MAAL,GAAcD,OAAO,CAACE,WAAR,IAAuB,IAArC,CAD6B,CACc;;AAC3C,SAAKC,KAAL,GAAa,IAAIP,KAAJ,CAAUG,QAAV,CAAb;AACF;;AAEAK,EAAAA,KAAK,GAAG;AACN,WAAO,IAAP;AACF;;AAEAC,EAAAA,KAAK,GAAG;AACN;AACA,WAAO,IAAP;AACF;;AAEAC,EAAAA,MAAM,CAACC,GAAD,EAAM;AACV,QAAIC,GAAG,GAAGd,YAAY,CAACa,GAAG,CAACE,IAAL,CAAtB;AACA,WAAO,KAAKN,KAAL,CAAWO,GAAX,CAAeF,GAAf,CAAP;AACF;;AAEAG,EAAAA,GAAG,CAACJ,GAAD,EAAM;AACP,QAAIC,GAAG,GAAGd,YAAY,CAACa,GAAG,CAACE,IAAL,CAAtB;AACA,WAAO,KAAKN,KAAL,CAAWQ,GAAX,CAAeH,GAAf,EAAoB,CAACI,GAAD,EAAMC,KAAN,KAAgB;AACzC,UAAGA,KAAH,EAAU;AACR,YAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,KAAX,CAAX;AACA,eAAOC,IAAP;AACD,OAHD,MAIK;AACH,eAAO,IAAP;AACD;AACF,KARM,CAAP;AASF;;AAEAG,EAAAA,GAAG,CAACV,GAAD,EAAMM,KAAN,EAAab,OAAO,GAAC,EAArB,EAAyB;AAC1B,QAAIQ,GAAG,GAAGd,YAAY,CAACa,GAAG,CAACE,IAAL,CAAtB;AACA,QAAIK,IAAI,GAAGC,IAAI,CAACG,SAAL,CAAeL,KAAf,CAAX;AACA,WAAO,KAAKV,KAAL,CAAWc,GAAX,CAAeT,GAAf,EAAoBM,IAApB,EAA0B,IAA1B,EAAgC,KAAKb,MAArC,CAAP;AACD;;AArCH;;AAwCAkB,MAAM,CAACC,OAAP,GAAiBvB,UAAjB","sourcesContent":["const normalizeUrl = require('normalize-url');\nconst Redis = require('ioredis');\n\nclass RedisCache\n{\n  constructor(redisUrl, options) {\n    this.expire = options.cacheMaxAge || 3600; // default to 1 hr\n    this.redis = new Redis(redisUrl);\n\t}\n\n  clean() {\n    return true\n\t}\n\n  clear() {\n    //this.redis.flushdb();\n    return true\n\t}\n\n  delete(url) {\n    let key = normalizeUrl(url.href);\n    return this.redis.del(key);\n\t}\n\n  get(url) {\n    let key = normalizeUrl(url.href);\n    return this.redis.get(key, (err, value) => {\n      if(value) {\n        let json = JSON.parse(value);\n        return json\n      }\n      else {\n        return null\n      }\n    });\n\t}\n\n  set(url, value, options={}) {\n    let key = normalizeUrl(url.href);\n    let json = JSON.stringify(value);\n    return this.redis.set(key, json, \"EX\", this.expire)\n  }\n}\n\nmodule.exports = RedisCache;\n"],"file":"redisCache.js"}