{"version":3,"sources":["../../lib/internal/scrapeHtml.js"],"names":["MAX_FILTER_LEVEL","TAGS","length","ALL_NODE_ATTRS","SPECIAL_NODE_NAME_PREFIX","BASE_NODE_NAME","BODY_NODE_NAME","COMMENT_NODE_NAME","DOCUMENT_NODE_NAME","HEAD_NODE_NAME","HTML_NODE_NAME","META_NODE_NAME","TEXT_NODE_NAME","CONTENT_ATTR_NAME","HREF_ATTR_NAME","HTTP_EQUIV_ATTR_NAME","NAME_ATTR_NAME","PING_ATTR_NAME","SRCSET_ATTR_NAME","REFRESH_ATTR_VALUE","ROBOTS_ATTR_VALUE","findLinks","rootNode","callback","node","nodeName","filteredNodeAttrs","attrs","forEach","name","attrName","value","attrValue","url","attrMap","toLowerCase","map","image","trim","Array","isArray","_url","findPreliminaries","robots","result","base","RobotDirectives","isBot","meta","findRootNode","document","childNodes","find","childNode","getNthIndex","parentsChildren","parentNode","count","every","child","startsWith","getSelector","selector","push","reverse","join","getText","text","stringifyNode","attrsString","reduce","pageURL","links","location","sourceCodeLocation","link","Link","set","HTML_ATTR_NAME","HTML_ATTRS","HTML_BASE_HREF","HTML_INDEX","HTML_LOCATION","HTML_SELECTOR","HTML_TAG","HTML_TAG_NAME","HTML_TEXT","resolve"],"mappings":"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","sourcesContent":["import condenseWhitespace from \"condense-whitespace\";\nimport Link, {HTML_ATTR_NAME, HTML_ATTRS, HTML_BASE_HREF, HTML_INDEX, HTML_LOCATION, HTML_SELECTOR, HTML_TAG, HTML_TAG_NAME, HTML_TEXT} from \"./Link\";\nimport list2Array from \"list-to-array\";\nimport parseMetaRefresh from \"http-equiv-refresh\";\nimport parseSrcset from \"parse-srcset\";\nimport RobotDirectives from \"robot-directives\";\nimport TAGS from \"./tags\";\nimport walk from \"walk-parse5\";\n\n\n\nconst MAX_FILTER_LEVEL = TAGS[TAGS.length - 1];\nconst ALL_NODE_ATTRS = MAX_FILTER_LEVEL[\"*\"];\n\nconst SPECIAL_NODE_NAME_PREFIX = \"#\";\n\nconst BASE_NODE_NAME = \"base\";\nconst BODY_NODE_NAME = \"body\";\nconst COMMENT_NODE_NAME = `${SPECIAL_NODE_NAME_PREFIX}comment`;\nconst DOCUMENT_NODE_NAME = `${SPECIAL_NODE_NAME_PREFIX}document`;\nconst HEAD_NODE_NAME = \"head\";\nconst HTML_NODE_NAME = \"html\";\nconst META_NODE_NAME = \"meta\";\nconst TEXT_NODE_NAME = `${SPECIAL_NODE_NAME_PREFIX}text`;\n\nconst CONTENT_ATTR_NAME = \"content\";\nconst HREF_ATTR_NAME = \"href\";\nconst HTTP_EQUIV_ATTR_NAME = \"http-equiv\";\nconst NAME_ATTR_NAME = \"name\";\nconst PING_ATTR_NAME = \"ping\";\nconst SRCSET_ATTR_NAME = \"srcset\";\n\nconst REFRESH_ATTR_VALUE = \"refresh\";\nconst ROBOTS_ATTR_VALUE = \"robots\";\n\n\n\n/**\n * Traverse the root node (synchronously) and return located links via a callback function.\n * @param {object} rootNode\n * @param {Function} callback\n */\nconst findLinks = (rootNode, callback) =>\n{\n\twalk(rootNode, node =>\n\t{\n\t\tif (node.nodeName!==COMMENT_NODE_NAME && node.nodeName!==TEXT_NODE_NAME)\n\t\t{\n\t\t\tconst filteredNodeAttrs = MAX_FILTER_LEVEL[node.nodeName] ?? {};\n\n\t\t\tnode.attrs.forEach(({name:attrName, value:attrValue}) =>\n\t\t\t{\n\t\t\t\tlet url = null;\n\n\t\t\t\t// If a supported attribute\n\t\t\t\tif (attrName in filteredNodeAttrs || attrName in ALL_NODE_ATTRS)\n\t\t\t\t{\n\t\t\t\t\tswitch (attrName)\n\t\t\t\t\t{\n\t\t\t\t\t\tcase CONTENT_ATTR_NAME:\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Special case for `<meta http-equiv=\"refresh\" content>`\n\t\t\t\t\t\t\t// No browser supports a value surrounded by spaces, so `trim()` is not used\n\t\t\t\t\t\t\tif (node.attrMap[HTTP_EQUIV_ATTR_NAME]?.toLowerCase() === REFRESH_ATTR_VALUE)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\turl = parseMetaRefresh(attrValue).url;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase PING_ATTR_NAME:\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\turl = list2Array(attrValue, \",\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase SRCSET_ATTR_NAME:\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\turl = parseSrcset(attrValue).map(image => image.url);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// https://html.spec.whatwg.org/multipage/infrastructure.html#valid-url-potentially-surrounded-by-spaces\n\t\t\t\t\t\t\turl = attrValue.trim();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (Array.isArray(url))\n\t\t\t\t\t{\n\t\t\t\t\t\turl.forEach(_url => callback(node, attrName, _url));\n\t\t\t\t\t}\n\t\t\t\t\telse if (url != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tcallback(node, attrName, url);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n};\n\n\n\n/**\n * Traverse the root node to locate preliminary elements/data.\n *\n * <base href>\n *\n * \tLooks for the first instance. If no `href` attribute exists,\n * \tthe element is ignored and possible successors are considered.\n *\n * <meta name content>\n *\n * \tLooks for all robot instances and cascades the values.\n *\n * @param {object} rootNode\n * @param {RobotDirectives} robots\n * @returns {object}\n */\nconst findPreliminaries = (rootNode, robots) =>\n{\n\tconst result = { base:null };\n\n\twalk(rootNode, ({attrMap, nodeName}) =>\n\t{\n\t\tswitch (nodeName)\n\t\t{\n\t\t\t// `<base>` can be anywhere, not just within `<head>`\n\t\t\tcase BASE_NODE_NAME:\n\t\t\t{\n\t\t\t\tif (result.base===null && HREF_ATTR_NAME in attrMap)\n\t\t\t\t{\n\t\t\t\t\t// https://html.spec.whatwg.org/multipage/infrastructure.html#valid-url-potentially-surrounded-by-spaces\n\t\t\t\t\tresult.base = attrMap[HREF_ATTR_NAME].trim();\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// `<meta>` can be anywhere\n\t\t\tcase META_NODE_NAME:\n\t\t\t{\n\t\t\t\tif (robots && NAME_ATTR_NAME in attrMap && CONTENT_ATTR_NAME in attrMap)\n\t\t\t\t{\n\t\t\t\t\tconst name = attrMap[NAME_ATTR_NAME].trim().toLowerCase();\n\n\t\t\t\t\tif (name===ROBOTS_ATTR_VALUE || RobotDirectives.isBot(name))\n\t\t\t\t\t{\n\t\t\t\t\t\trobots.meta(name, attrMap[CONTENT_ATTR_NAME]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (result.base!==null && !robots)\n\t\t{\n\t\t\t// Kill walk\n\t\t\treturn false;\n\t\t}\n\t});\n\n\treturn result;\n};\n\n\n\n/**\n * Find the `<html>` element.\n * @param {object} document\n * @returns {object}\n */\nconst findRootNode = document => document.childNodes.find(childNode =>\n{\n\t// Doctypes have no `childNodes` property\n\t// HTML can only have one true root node\n\tif (childNode.childNodes != null)\n\t{\n\t\treturn childNode;\n\t}\n});\n\n\n\n/**\n * Find a node's `:nth-child()` index among its siblings.\n * @param {object} node\n * @returns {number}\n */\nconst getNthIndex = node =>\n{\n\tconst parentsChildren = node.parentNode.childNodes;\n\tlet count = 0;\n\n\tparentsChildren.every(child =>\n\t{\n\t\tif (child !== node)\n\t\t{\n\t\t\t// Exclude non-element nodes\n\t\t\tif (!child.nodeName.startsWith(SPECIAL_NODE_NAME_PREFIX))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t});\n\n\t// `:nth-child()` indices don't start at 0\n\treturn count + 1;\n};\n\n\n\n/**\n * Produces a CSS selector that matches an element.\n * @param {object} node\n * @returns {string}\n */\nconst getSelector = node =>\n{\n\tconst selector = [];\n\n\twhile (node.nodeName !== DOCUMENT_NODE_NAME)\n\t{\n\t\tlet name = node.nodeName;\n\n\t\t// Only one of these are ever allowed per document -- so, index is unnecessary\n\t\tif (name!==HTML_NODE_NAME && name!==BODY_NODE_NAME & name!==HEAD_NODE_NAME)\n\t\t{\n\t\t\tname += `:nth-child(${getNthIndex(node)})`;\n\t\t}\n\n\t\t// Building backwards\n\t\tselector.push(name);\n\n\t\tnode = node.parentNode;\n\t}\n\n\treturn selector.reverse().join(\" > \");\n};\n\n\n\n/**\n * Produces an `innerText` value for text nodes within an element.\n * @param {object} node\n * @returns {string|null}\n */\nconst getText = node =>\n{\n\tlet text = null;\n\n\tif (node.childNodes.length > 0)\n\t{\n\t\ttext = \"\";\n\n\t\twalk(node, ({nodeName, value}) =>\n\t\t{\n\t\t\tif (nodeName === TEXT_NODE_NAME)\n\t\t\t{\n\t\t\t\ttext += value;\n\t\t\t}\n\t\t});\n\n\t\t// @todo don't normalize if within <pre> ? use \"normalize-html-whitespace\" package if so\n\t\ttext = condenseWhitespace(text);\n\t}\n\n\treturn text;\n};\n\n\n\n/**\n * Serialize an HTML element into a string.\n * @param {object} node\n * @returns {string}\n */\nconst stringifyNode = ({attrs, nodeName}) =>\n{\n\tconst attrsString = attrs.reduce((result, {name, value}) => `${result} ${name}=\"${value}\"`, \"\");\n\n\treturn `<${nodeName}${attrsString}>`;\n};\n\n\n\n/**\n * Scrape a parsed HTML document/tree for links.\n * @param {object} document\n * @param {URL|string} pageURL\n * @param {RobotDirectives} robots\n * @returns {Array<Link>}\n */\nexport default (document, pageURL, robots) =>\n{\n\tconst links = [];\n\tconst rootNode = findRootNode(document);\n\tconst {base} = findPreliminaries(rootNode, robots);\n\n\tfindLinks(rootNode, (node, attrName, url) =>\n\t{\n\t\t// Elements added for compliance (not from HTML source) have no location\n\t\tconst location = node.sourceCodeLocation?.attrs[attrName] ?? null;\n\n\t\tconst link = new Link()\n\t\t.set(HTML_ATTR_NAME, attrName)\n\t\t.set(HTML_ATTRS, node.attrMap)\n\t\t.set(HTML_BASE_HREF, base)\n\t\t.set(HTML_INDEX, links.length)\n\t\t.set(HTML_LOCATION, location)\n\t\t.set(HTML_SELECTOR, getSelector(node))\n\t\t.set(HTML_TAG, stringifyNode(node))\n\t\t.set(HTML_TAG_NAME, node.nodeName)\n\t\t.set(HTML_TEXT, getText(node))\n\t\t.resolve(url, pageURL);\n\n\t\tlinks.push(link);\n\t});\n\n\treturn links;\n};\n"],"file":"scrapeHtml.js"}