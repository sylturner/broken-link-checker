{"version":3,"sources":["../../lib/internal/requestHTTP.js"],"names":["ERROR_EVENT","REDIRECT_EVENT","RESPONSE_EVENT","REQUEST_EVENT","createRequest","url","auth","method","options","retry","Promise","resolve","reject","headers","userAgent","redirects","rejectUnauthorized","retries","throwHttpErrors","timeout","on","request","console","log","setTimeout","destroy","stream","push","simplifyResponse","response","HEAD_METHOD","retryHeadFail","retryHeadCodes","includes","status","GET_METHOD","statusCode","statusMessage","statusText","URL","stringifyAuth","password","username","cache","isURL","lenient","TypeError","BLC_INVALID","promise","toLowerCase","cacheResponses","cachedPromise","then","set","forEach","redirect","i","subsequentRedirects","slice","catch","error"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AACA;AAIA,MAAMA,WAAW,GAAG,OAApB;AACA,MAAMC,cAAc,GAAG,UAAvB;AACA,MAAMC,cAAc,GAAG,UAAvB;AACA,MAAMC,aAAa,GAAG,SAAtB;AAIA;;;;;;;;;;AASA,MAAMC,aAAa,GAAG,CAACC,GAAD,EAAMC,IAAN,EAAYC,MAAZ,EAAoBC,OAApB,EAA6BC,KAAK,GAAC,KAAnC,KAA6C,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAC/E;AACC,QAAMC,OAAO,GAAG;AAAE,kBAAcL,OAAO,CAACM;AAAxB,GAAhB;AACA,QAAMC,SAAS,GAAG,EAAlB;AAEA,mBAAWV,GAAX,EACA;AACC;AACA;AACAQ,IAAAA,OAHD;AAICN,IAAAA,MAJD;AAKCS,IAAAA,kBAAkB,EAAE,KALrB;AAK6B;AAC5BC,IAAAA,OAAO,EAAE,CANV;AAMc;AACXC,IAAAA,eAAe,EAAE,KAPpB;AAQGC,IAAAA,OAAO,EAAE;AARZ,GADA,EAWEC,EAXF,CAWKjB,aAXL,EAWoBkB,OAAO,IAAI;AAC5BC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAC,IAAAA,UAAU,CAAC,MAAM;AACfF,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAF,MAAAA,OAAO,CAACI,OAAR;AACD,KAHS,EAGP,KAHO,CAAV;AAID,GAjBF,EAkBEL,EAlBF,CAkBKpB,WAlBL,EAkBkBY,MAlBlB,EAmBCQ,EAnBD,CAmBInB,cAnBJ,EAmBoByB,MAAM,IAAIX,SAAS,CAACY,IAAV,CAAgBC,gBAAgB,CAACF,MAAD,CAAhC,CAnB9B,EAoBCN,EApBD,CAoBIlB,cApBJ,EAoBoBwB,MAAM,IAC1B;AACG,UAAMG,QAAQ,GAAGD,gBAAgB,CAACF,MAAD,EAASX,SAAT,CAAjC;;AAEF,QAAI,CAACN,KAAD,IAAUF,MAAM,KAAGuB,oBAAnB,IAAkCtB,OAAO,CAACuB,aAA1C,IAA2DvB,OAAO,CAACwB,cAAR,CAAuBC,QAAvB,CAAgCJ,QAAQ,CAACK,MAAzC,CAA/D,EACA;AACC;AACAvB,MAAAA,OAAO,CAAEP,aAAa,CAACC,GAAD,EAAMC,IAAN,EAAY6B,mBAAZ,EAAwB3B,OAAxB,EAAiC,IAAjC,CAAf,CAAP;AACA,KAJD,MAKK,IAAID,MAAM,KAAG4B,mBAAT,IAAuBN,QAAQ,CAACK,MAAT,IAAiB,GAAxC,IAA+CL,QAAQ,CAACK,MAAT,IAAiB,GAApE,EACL;AACCvB,MAAAA,OAAO,CAAC;AAAEkB,QAAAA,QAAF;AAAYH,QAAAA;AAAZ,OAAD,CAAP;AACA,KAHI,MAKL;AACCf,MAAAA,OAAO,CAAC;AAAEkB,QAAAA;AAAF,OAAD,CAAP;AACA;AACD,GArCD;AAsCA,CA3CkE,CAAnE;AA+CA;;;;;;;;;AAOA,MAAMD,gBAAgB,GAAG,CAAC;AAACf,EAAAA,OAAD;AAAUuB,EAAAA,UAAV;AAAsBC,EAAAA,aAAtB;AAAqChC,EAAAA;AAArC,CAAD,EAA4CU,SAA5C,MACxB;AACAF,EAAAA,OADA;AAEAqB,EAAAA,MAAM,EAAEE,UAFR;AAGAE,EAAAA,UAAU,EAAED,aAHZ;AAIAhC,EAAAA,GAAG,EAAE,IAAIkC,GAAJ,CAAQlC,GAAR,CAJL;AAKA,MAAIU,SAAS,IAAI;AAACA,IAAAA;AAAD,GAAjB;AALA,CADwB,CAAzB;AAWA;;;;;;;;AAMA,MAAMyB,aAAa,GAAG,CAACnC,GAAD,EAAMC,IAAN,KACtB;AACC,MAAID,GAAG,CAACoC,QAAJ,KAAe,EAAf,IAAqBpC,GAAG,CAACqC,QAAJ,KAAe,EAAxC,EACA;AACC,WAAQ,GAAErC,GAAG,CAACqC,QAAS,IAAGrC,GAAG,CAACoC,QAAS,EAAvC;AACA,GAHD,MAIK,IAAInC,IAAI,CAACmC,QAAL,KAAgB,EAAhB,IAAsBnC,IAAI,CAACoC,QAAL,KAAgB,EAA1C,EACL;AACC,WAAQ,GAAEpC,IAAI,CAACoC,QAAS,IAAGpC,IAAI,CAACmC,QAAS,EAAzC;AACA;AACD,CAVD;AAcA;;;;;;;;;;;;;eAWe,OAAOpC,GAAP,EAAYC,IAAZ,EAAkBC,MAAlB,EAA0BoC,KAA1B,EAAiCnC,OAAjC,KACf;AACC,MAAI,CAACoC,eAAMC,OAAN,CAAcxC,GAAd,CAAL,EACC;AACA,UAAM,IAAIyC,SAAJ,CAAcC,oBAAd,CAAN;AACA,GAHD,MAKA;AACC,UAAMC,OAAO,GAAG5C,aAAa,CAACC,GAAD,EAAMC,IAAN,EAAYC,MAAM,CAAC0C,WAAP,EAAZ,EAAkCzC,OAAlC,CAA7B;;AAEA,QAAIA,OAAO,CAAC0C,cAAZ,EACA;AACC,YAAMC,aAAa,GAAGH,OAAO,CAC5BI,IADqB,CAChB,CAAC;AAACvB,QAAAA;AAAD,OAAD,KACN;AACC;AACAc,QAAAA,KAAK,CAACU,GAAN,CAAUhD,GAAV,EAAewB,QAAf,EAFD,CAIC;;AACAc,QAAAA,KAAK,CAACU,GAAN,CAAUxB,QAAQ,CAACxB,GAAnB,EAAwBwB,QAAxB,EALD,CAOC;;AACAA,QAAAA,QAAQ,CAACd,SAAT,CAAmBuC,OAAnB,CAA2B,CAACC,QAAD,EAAWC,CAAX,KAC3B;AACC,gBAAMC,mBAAmB,GAAG5B,QAAQ,CAACd,SAAT,CAAmB2C,KAAnB,CAAyBF,CAAC,GAAG,CAA7B,CAA5B;AAEAb,UAAAA,KAAK,CAACU,GAAN,CAAUE,QAAQ,CAAClD,GAAnB,EAAwB,EAAC,GAAGwB,QAAJ;AAAcd,YAAAA,SAAS,EAAC0C;AAAxB,WAAxB;AACA,SALD;AAOA,eAAO5B,QAAP;AACA,OAlBqB,EAmBrB8B,KAnBqB,CAmBfC,KAAK,IAAIA,KAnBM,CAAtB,CADD,CAoB0B;AACzB;;AAED,WAAOZ,OAAP;AACA;AACD,C","sourcesContent":["import {BLC_INVALID} from \"./reasons\";\nimport {GET_METHOD, HEAD_METHOD} from \"./methods\";\nimport isURL from \"isurl\";\nimport {stream as streamHTTP} from \"got\";\n//import tunnel from \"auto-tunnel\";\n\n\n\nconst ERROR_EVENT = \"error\";\nconst REDIRECT_EVENT = \"redirect\";\nconst RESPONSE_EVENT = \"response\";\nconst REQUEST_EVENT = \"request\";\n\n\n\n/**\n * Create an HTTP request.\n * @param {URL} url\n * @param {object} auth\n * @param {string} method\n * @param {object} options\n * @param {boolean} [retry]\n * @returns {Promise<object>}\n */\nconst createRequest = (url, auth, method, options, retry=false) => new Promise((resolve, reject) =>\n{\n\tconst headers = { \"user-agent\": options.userAgent };\n\tconst redirects = [];\n\n\tstreamHTTP(url,\n\t{\n\t\t//agent: tunnel(url, { proxyHeaders:headers }),\n\t\t//auth: stringifyAuth(url, auth),\n\t\theaders,\n\t\tmethod,\n\t\trejectUnauthorized: false,  // accept self-signed SSL certificates\n\t\tretries: 0,  // explicit; they're already disabled for streams\n    throwHttpErrors: false,\n    timeout: 30000\n\t})\n  .on(REQUEST_EVENT, request => {\n    console.log(\"request\");\n    setTimeout(() => {\n      console.log(\"timing out\");\n      request.destroy();\n    }, 10000);\n  })\n  .on(ERROR_EVENT, reject)\n\t.on(REDIRECT_EVENT, stream => redirects.push( simplifyResponse(stream) ))\n\t.on(RESPONSE_EVENT, stream =>\n\t{\n    const response = simplifyResponse(stream, redirects);\n\n\t\tif (!retry && method===HEAD_METHOD && options.retryHeadFail && options.retryHeadCodes.includes(response.status))\n\t\t{\n\t\t\t// Retry potentially broken server with GET_METHOD\n\t\t\tresolve( createRequest(url, auth, GET_METHOD, options, true) );\n\t\t}\n\t\telse if (method===GET_METHOD && response.status>=200 && response.status<=299)\n\t\t{\n\t\t\tresolve({ response, stream });\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresolve({ response });\n\t\t}\n\t});\n});\n\n\n\n/**\n * Create a simple response object from that of the \"http\" module.\n * @param {object|Stream} response\n * @param {Array<object>} [redirects]\n * @returns {object}\n * @todo add response time -- https://github.com/sindresorhus/got/issues/874\n */\nconst simplifyResponse = ({headers, statusCode, statusMessage, url}, redirects) =>\n({\n\theaders,\n\tstatus: statusCode,\n\tstatusText: statusMessage,\n\turl: new URL(url),\n\t...(redirects && {redirects})\n});\n\n\n\n/**\n * Convert an HTTP authentication URL or object into a string.\n * @param {URL} url\n * @param {object} auth\n * @returns {string}\n */\nconst stringifyAuth = (url, auth) =>\n{\n\tif (url.password!==\"\" || url.username!==\"\")\n\t{\n\t\treturn `${url.username}:${url.password}`;\n\t}\n\telse if (auth.password!==\"\" || auth.username!==\"\")\n\t{\n\t\treturn `${auth.username}:${auth.password}`;\n\t}\n};\n\n\n\n/**\n * Create an HTTP request and optionally cache the response.\n * @param {URL} url\n * @param {object} auth\n * @param {string} method\n * @param {URLCache} cache\n * @param {object} options\n * @throws {TypeError} non-URL\n * @returns {Promise<object>}\n * @todo use `Promise.try()` instead of `async`\n */\nexport default async (url, auth, method, cache, options) =>\n{\n\tif (!isURL.lenient(url))\n  {\n\t\tthrow new TypeError(BLC_INVALID);\n\t}\n\telse\n\t{\n\t\tconst promise = createRequest(url, auth, method.toLowerCase(), options);\n\n\t\tif (options.cacheResponses)\n\t\t{\n\t\t\tconst cachedPromise = promise\n\t\t\t.then(({response}) =>\n\t\t\t{\n\t\t\t\t// Replace cached promise\n\t\t\t\tcache.set(url, response);\n\n\t\t\t\t// Any final redirect\n\t\t\t\tcache.set(response.url, response);\n\n\t\t\t\t// Any intermediary redirects\n\t\t\t\tresponse.redirects.forEach((redirect, i) =>\n\t\t\t\t{\n\t\t\t\t\tconst subsequentRedirects = response.redirects.slice(i + 1);\n\n\t\t\t\t\tcache.set(redirect.url, {...response, redirects:subsequentRedirects});\n\t\t\t\t});\n\n\t\t\t\treturn response;\n\t\t\t})\n\t\t\t.catch(error => error);  // pass-through\n\t\t}\n\n\t\treturn promise;\n\t}\n};\n"],"file":"requestHTTP.js"}