{"version":3,"sources":["../../lib/internal/parseOptions.js"],"names":["HAS_BEEN_PARSED_VALUE","Symbol","memoizeArray","array","reduce","map","value","toLowerCase","options","__parsed","DEFAULT_OPTIONS","acceptedSchemes","excludedSchemes","requestMethod"],"mappings":";;;;;;;AAAA;;;;AAIA,MAAMA,qBAAqB,GAAGC,MAAM,EAApC;AAIA;;;;;;;;;AAQA,MAAMC,YAAY,GAAGC,KAAK,IAAIA,KAAK,CAACC,MAAN,CAAa,CAACC,GAAD,EAAMC,KAAN,KAC3C;AACCD,EAAAA,GAAG,CAAEC,KAAK,CAACC,WAAN,EAAF,CAAH,GAA6B,IAA7B;AACA,SAAOF,GAAP;AACA,CAJ6B,EAI3B,EAJ2B,CAA9B;AAQA;;;;;;;eAKe,CAACG,OAAO,GAAG,EAAX,KACf;AACC,MAAIA,OAAO,CAACC,QAAR,KAAqBT,qBAAzB,EACA;AACCQ,IAAAA,OAAO,GAAG,EAAE,GAAGE,uBAAL;AAAsB,SAAGF;AAAzB,KAAV,CADD,CAGC;;AACAA,IAAAA,OAAO,CAACG,eAAR,GAA0BT,YAAY,CAACM,OAAO,CAACG,eAAT,CAAtC;AACAH,IAAAA,OAAO,CAACI,eAAR,GAA0BV,YAAY,CAACM,OAAO,CAACI,eAAT,CAAtC;AAEAJ,IAAAA,OAAO,CAACK,aAAR,GAAwBL,OAAO,CAACK,aAAR,CAAsBN,WAAtB,EAAxB,CAPD,CASC;;AACAC,IAAAA,OAAO,CAACC,QAAR,GAAmBT,qBAAnB;AACA;;AAED,SAAOQ,OAAP;AACA,C","sourcesContent":["import DEFAULT_OPTIONS from \"./defaultOptions\";\n\n\n\nconst HAS_BEEN_PARSED_VALUE = Symbol();\n\n\n\n/**\n * Convert an Array to a map (object) of keys.\n * @param {Array} array\n * @returns {object}\n * @example\n * memoize([\"asdf1\", \"asdf2\"]);\n * //-> { asdf1, asdf2 }\n */\nconst memoizeArray = array => array.reduce((map, value) =>\n{\n\tmap[ value.toLowerCase() ] = true;\n\treturn map;\n}, {});\n\n\n\n/**\n * Combine consumer options with defaults, then normalize/optimize.\n * @param {object} [options]\n * @returns {object}\n */\nexport default (options = {}) =>\n{\n\tif (options.__parsed !== HAS_BEEN_PARSED_VALUE)\n\t{\n\t\toptions = { ...DEFAULT_OPTIONS, ...options };\n\n\t\t// Maps of this kind are easier to work with, but are not consumer-friendly\n\t\toptions.acceptedSchemes = memoizeArray(options.acceptedSchemes);\n\t\toptions.excludedSchemes = memoizeArray(options.excludedSchemes);\n\n\t\toptions.requestMethod = options.requestMethod.toLowerCase();\n\n\t\t// Undocumented -- avoids reparsing options passed through from class to class\n\t\toptions.__parsed = HAS_BEEN_PARSED_VALUE;\n\t}\n\n\treturn options;\n};\n"],"file":"parseOptions.js"}