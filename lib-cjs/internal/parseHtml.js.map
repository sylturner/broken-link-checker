{"version":3,"sources":["../../lib/internal/parseHtml.js"],"names":["FINISH_EVENT","OPTIONS","sourceCodeLocationInfo","treeAdapter","defaultTreeAdapter","createElement","args","result","attrMap","memoizeAttrs","attrs","reduce","name","value","input","Promise","resolve","reject","parser","ParserStream","once","document","toStringChunks","PassThrough","encoding","pipe","TypeError"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAIA,MAAMA,YAAY,GAAG,QAArB;AAIA,MAAMC,OAAO,GACb;AACCC,EAAAA,sBAAsB,EAAE,IADzB;AAECC,EAAAA,WAAW,EACX,EACC,GAAGC,iBADJ;AAGCC,IAAAA,aAAa,EAAE,CAAC,GAAGC,IAAJ,KACf;AACC,YAAMC,MAAM,GAAGH,kBAAmBC,aAAnB,CAAiC,GAAGC,IAApC,CAAf;;AACAC,MAAAA,MAAM,CAACC,OAAP,GAAiBC,YAAY,CAACF,MAAM,CAACG,KAAR,CAA7B;AACA,aAAOH,MAAP;AACA;AARF;AAHD,CADA;AAkBA;;;;;;;AAMA,MAAME,YAAY,GAAGC,KAAK,IAAIA,KAAK,CAACC,MAAN,CAAa,CAACJ,MAAD,EAAS;AAACK,EAAAA,IAAD;AAAOC,EAAAA;AAAP,CAAT,KAC3C;AACCN,EAAAA,MAAM,CAACK,IAAD,CAAN,GAAeC,KAAf;AACA,SAAON,MAAP;AACA,CAJ6B,EAI3B,EAJ2B,CAA9B;AAQA;;;;;;;;eAMeO,KAAK,IAAI,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KACpC;AACC,MAAI,uBAASH,KAAT,CAAJ,EACA;AACC,UAAMI,MAAM,GAAG,IAAIC,2BAAJ,CAAiBlB,OAAjB,EACdmB,IADc,CACTpB,YADS,EACK,MAAMgB,OAAO,CAACE,MAAM,CAACG,QAAR,CADlB,CAAf,CADD,CAIC;;AACA,UAAMC,cAAc,GAAG,IAAIC,mBAAJ,CAAgB;AAAEC,MAAAA,QAAQ,EAAC;AAAX,KAAhB,CAAvB;AAEAV,IAAAA,KAAK,CAACW,IAAN,CAAWH,cAAX,EAA2BG,IAA3B,CAAgCP,MAAhC;AACA,GATD,MAUK,IAAI,uBAASJ,KAAT,CAAJ,EACL;AACCE,IAAAA,OAAO,CAAE,kBAAMF,KAAN,EAAab,OAAb,CAAF,CAAP;AACA,GAHI,MAKL;AACCgB,IAAAA,MAAM,CAAE,IAAIS,SAAJ,CAAc,eAAd,CAAF,CAAN;AACA;AACD,CApBuB,C","sourcesContent":["import defaultTreeAdapter from \"parse5/lib/tree-adapters/default\";\nimport isStream from \"is-stream\";\nimport isString from \"is-string\";\nimport {parse} from \"parse5\";\nimport ParserStream from \"parse5-parser-stream\";\nimport {PassThrough} from \"stream\";\n\n\n\nconst FINISH_EVENT = \"finish\";\n\n\n\nconst OPTIONS =\n{\n\tsourceCodeLocationInfo: true,\n\ttreeAdapter:\n\t{\n\t\t...defaultTreeAdapter,\n\n\t\tcreateElement: (...args) =>\n\t\t{\n\t\t\tconst result = defaultTreeAdapter.createElement(...args);\n\t\t\tresult.attrMap = memoizeAttrs(result.attrs);\n\t\t\treturn result;\n\t\t}\n\t}\n};\n\n\n\n/**\n * Convert a list of parse5 attributes into key-value pairs.\n * Note: spec-compliant HTML cannot have multiple attrs of the same name.\n * @param {Array} attrs\n * @returns {object}\n */\nconst memoizeAttrs = attrs => attrs.reduce((result, {name, value}) =>\n{\n\tresult[name] = value;\n\treturn result;\n}, {});\n\n\n\n/**\n * Parse an HTML stream/string and return a tree.\n * @param {Stream|string} input\n * @throws {TypeError} non-Stream or non-string\n * @returns {Promise<object>}\n */\nexport default input => new Promise((resolve, reject) =>\n{\n\tif (isStream(input))\n\t{\n\t\tconst parser = new ParserStream(OPTIONS)\n\t\t.once(FINISH_EVENT, () => resolve(parser.document));\n\n\t\t// @todo https://github.com/sindresorhus/got/issues/834\n\t\tconst toStringChunks = new PassThrough({ encoding:\"utf8\" });\n\n\t\tinput.pipe(toStringChunks).pipe(parser);\n\t}\n\telse if (isString(input))\n\t{\n\t\tresolve( parse(input, OPTIONS) );\n\t}\n\telse\n\t{\n\t\treject( new TypeError(\"Invalid input\") );\n\t}\n});\n"],"file":"parseHtml.js"}