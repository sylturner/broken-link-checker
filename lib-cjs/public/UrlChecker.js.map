{"version":3,"sources":["../../lib/public/UrlChecker.js"],"names":["UrlChecker","SafeEventEmitter","constructor","options","RedisCache","redisCache","maxAge","cacheMaxAge","RequestQueue","maxSockets","maxSocketsPerHost","rateLimit","on","ITEM_EVENT","url","auth","customData","link","done","result","emit","LINK_EVENT","REQUEST_QUEUE_END_EVENT","disconnect","END_EVENT","disconnectCache","clearCache","dequeue","id","success","QUEUE_EVENT","enqueue","Link","isURL","lenient","resolve","TypeError","get","REBASED_URL","has","isPaused","numActiveLinks","numActive","numQueuedLinks","numQueued","pause","resume","__cache"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;AAIe,MAAMA,UAAN,SAAyBC,yBAAzB,CACf;AAMCC,EAAAA,WAAW,CAACC,OAAD,EACX;AACC;;AADD;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAGGA,IAAAA,OAAO,GAAG,2BAAaA,OAAb,CAAV,CAHH,CAKG;;AACA,wCAAc,IAAIC,mBAAJ,CAAeD,OAAO,CAACE,UAAvB,EAAmC;AAAEC,MAAAA,MAAM,EAACH,OAAO,CAACI;AAAjB,KAAnC,CAAd;;AAEF,4CAAkB,IAAIC,4BAAJ,CAClB;AACCC,MAAAA,UAAU,EAASN,OAAO,CAACM,UAD5B;AAECC,MAAAA,iBAAiB,EAAEP,OAAO,CAACO,iBAF5B;AAGCC,MAAAA,SAAS,EAAUR,OAAO,CAACQ;AAH5B,KADkB,EAMjBC,EANiB,CAMdC,+BANc,EAMF,OAAOC,GAAP,EAAY;AAACC,MAAAA,IAAD;AAAOC,MAAAA,UAAP;AAAmBC,MAAAA;AAAnB,KAAZ,EAAsCC,IAAtC,KAChB;AACC,YAAMC,MAAM,GAAG,MAAM,wBAAUF,IAAV,EAAgBF,IAAhB,wBAAsB,IAAtB,WAAmCZ,OAAnC,CAArB;AAEA,WAAKiB,IAAL,CAAUC,kBAAV,EAAsBF,MAAtB,EAA8BH,UAA9B,EAHD,CAKC;AACA;;AACAE,MAAAA,IAAI;AACJ,KAfiB,EAgBbN,EAhBa,CAgBVU,8BAhBU,EAgBe,MAAM;AACjC,0CAAYC,UAAZ;;AACA,WAAKH,IAAL,CAAUI,iBAAV;AACD,KAnBa,CAAlB;AAoBA;;AAGDC,EAAAA,eAAe,GACf;AACC,wCAAYF,UAAZ;AACA;;AAEDG,EAAAA,UAAU,GACV;AACC;AACA,WAAO,IAAP;AACA;;AAIDC,EAAAA,OAAO,CAACC,EAAD,EACP;AACC,UAAMC,OAAO,GAAG,wCAAgBF,OAAhB,CAAwBC,EAAxB,CAAhB;;AAEA,SAAKR,IAAL,CAAUU,mBAAV;AAEA,WAAOD,OAAP;AACA,GA1DF,CA8DC;;;AACAE,EAAAA,OAAO,CAACjB,GAAD,EAAME,UAAN,EAAkBD,IAAI,GAAC,EAAvB,EACN;AACA,QAAIE,IAAJ,CADA,CAGA;;AACA,QAAIH,GAAG,YAAYkB,aAAnB,EACA;AACCf,MAAAA,IAAI,GAAGH,GAAP;AACA,KAHD,CAIA;AAJA,SAKK,IAAImB,eAAMC,OAAN,CAAcpB,GAAd,CAAJ,EACL;AACCG,QAAAA,IAAI,GAAG,IAAIe,aAAJ,GAAWG,OAAX,CAAmBrB,GAAnB,CAAP;AACA,OAHI,MAKH;AACD,cAAM,IAAIsB,SAAJ,CAAc,aAAd,CAAN;AACA;;AAED,UAAMR,EAAE,GAAG,wCAAgBG,OAAhB,CAAwBd,IAAI,CAACoB,GAAL,CAASC,iBAAT,CAAxB,EAA+C;AAAEvB,MAAAA,IAAF;AAAQC,MAAAA,UAAR;AAAoBC,MAAAA;AAApB,KAA/C,CAAX;;AAEA,SAAKG,IAAL,CAAUU,mBAAV;AAEA,WAAOF,EAAP;AACA;;AAIDW,EAAAA,GAAG,CAACX,EAAD,EACH;AACC,WAAO,wCAAgBW,GAAhB,CAAoBX,EAApB,CAAP;AACA;;AAID,MAAIY,QAAJ,GACA;AACC,WAAO,wCAAgBA,QAAvB;AACA;;AAID,MAAIC,cAAJ,GACA;AACC,WAAO,wCAAgBC,SAAvB;AACA;;AAID,MAAIC,cAAJ,GACA;AACC,WAAO,wCAAgBC,SAAvB;AACA;;AAIDC,EAAAA,KAAK,GACL;AACC,4CAAgBA,KAAhB;;AACA,WAAO,IAAP;AACA;;AAIDC,EAAAA,MAAM,GACN;AACC,4CAAgBA,MAAhB;;AACA,WAAO,IAAP;AACA;;AAID,MAAIC,OAAJ,GACA;AACC,iCAAO,IAAP;AACA;;AA1IF","sourcesContent":["import checkLink from \"../internal/checkLink\";\nimport {END_EVENT, LINK_EVENT, QUEUE_EVENT} from \"../internal/events\";\nimport isURL from \"isurl\";\nimport Link, {REBASED_URL} from \"../internal/Link\";\nimport parseOptions from \"../internal/parseOptions\";\nimport RequestQueue, {ITEM_EVENT, END_EVENT as REQUEST_QUEUE_END_EVENT} from \"limited-request-queue\";\nimport SafeEventEmitter from \"../internal/SafeEventEmitter\";\nimport URLCache from \"urlcache\";\nimport RedisCache from \"../internal/redisCache\";\n\n\n\nexport default class UrlChecker extends SafeEventEmitter\n{\n\t#cache;\n\t#linkQueue;\n\n\n\n\tconstructor(options)\n\t{\n\t\tsuper();\n\n    options = parseOptions(options);\n\n    //this.#cache = new URLCache({ maxAge:options.cacheMaxAge });\n    this.#cache = new RedisCache(options.redisCache, { maxAge:options.cacheMaxAge });\n\n\t\tthis.#linkQueue = new RequestQueue(\n\t\t{\n\t\t\tmaxSockets:        options.maxSockets,\n\t\t\tmaxSocketsPerHost: options.maxSocketsPerHost,\n\t\t\trateLimit:         options.rateLimit\n\t\t})\n\t\t.on(ITEM_EVENT, async (url, {auth, customData, link}, done) =>\n\t\t{\n\t\t\tconst result = await checkLink(link, auth, this.#cache, options);\n\n\t\t\tthis.emit(LINK_EVENT, result, customData);\n\n\t\t\t// Auto-starts next queue item, if any\n\t\t\t// Emits REQUEST_QUEUE_END_EVENT, if not\n\t\t\tdone();\n\t\t})\n      .on(REQUEST_QUEUE_END_EVENT, () => {\n        this.#cache.disconnect();\n        this.emit(END_EVENT);\n      });\n\t}\n\n\n\tdisconnectCache()\n\t{\n\t\tthis.#cache.disconnect();\n\t}\n\n\tclearCache()\n\t{\n\t\t//this.#cache.clear();\n\t\treturn this;\n\t}\n\n\n\n\tdequeue(id)\n\t{\n\t\tconst success = this.#linkQueue.dequeue(id);\n\n\t\tthis.emit(QUEUE_EVENT);\n\n\t\treturn success;\n\t}\n\n\n\n\t// `auth` is undocumented and for internal use only\n\tenqueue(url, customData, auth={})\n  {\n\t\tlet link;\n\n\t\t// Undocumented internal use: `enqueue(Link)`\n\t\tif (url instanceof Link)\n\t\t{\n\t\t\tlink = url;\n\t\t}\n\t\t// Documented use: `enqueue(URL)`\n\t\telse if (isURL.lenient(url))\n\t\t{\n\t\t\tlink = new Link().resolve(url);\n\t\t}\n\t\telse\n    {\n\t\t\tthrow new TypeError(\"Invalid URL\");\n\t\t}\n\n\t\tconst id = this.#linkQueue.enqueue(link.get(REBASED_URL), { auth, customData, link });\n\n\t\tthis.emit(QUEUE_EVENT);\n\n\t\treturn id;\n\t}\n\n\n\n\thas(id)\n\t{\n\t\treturn this.#linkQueue.has(id);\n\t}\n\n\n\n\tget isPaused()\n\t{\n\t\treturn this.#linkQueue.isPaused;\n\t}\n\n\n\n\tget numActiveLinks()\n\t{\n\t\treturn this.#linkQueue.numActive;\n\t}\n\n\n\n\tget numQueuedLinks()\n\t{\n\t\treturn this.#linkQueue.numQueued;\n\t}\n\n\n\n\tpause()\n\t{\n\t\tthis.#linkQueue.pause();\n\t\treturn this;\n\t}\n\n\n\n\tresume()\n\t{\n\t\tthis.#linkQueue.resume();\n\t\treturn this;\n\t}\n\n\n\n\tget __cache()\n\t{\n\t\treturn this.#cache;\n\t}\n}\n"],"file":"UrlChecker.js"}